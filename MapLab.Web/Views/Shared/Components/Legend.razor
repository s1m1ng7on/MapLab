@using Newtonsoft.Json.Linq

<div class="legend">
    <h1 class="fw-bold mb-3">@Title</h1>
    @if (Data != null && Data.Count > 0)
    {
        var regions = Data.Where(d => d["type"].ToString() == "Region").ToList();
        var points = Data.Where(d => d["type"].ToString() == "Point").ToList();

        <div class="row">
            @if (regions.Any())
            {
                <div class="col-md-6">
                    @if (regions.Count < Data.Count)
                    {
                        <h2>Regions</h2>
                    }
                    <ul class="list-unstyled">
                        @foreach (var region in regions)
                        {
                            <li class="d-flex align-items-center mb-2">
                                <span class="color-switch me-2 d-inline-block" style="background-color: @region["fill"]"></span>
                                <input type="text"
                                       class="text-white border-0 bg-transparent legend-input"
                                       value="@region["name"]"
                                       @onchange="@(e => UpdateName(region, e.Value.ToString()))"
                                       placeholder="Enter name" />
                            </li>
                        }
                    </ul>
                </div>
            }

            @if (points.Any())
            {
                <div class="col-md-6">
                    @if (points.Count < Data.Count)
                    {
                        <h2>Points</h2>
                    }
                    <ul class="list-unstyled">
                        @foreach (var point in points)
                        {
                            <li class="d-flex align-items-center mb-2">
                                <span class="me-2 d-inline-block text-center"
                                      style="width: 30px; height: 30px; display: flex; align-items: center; justify-content: center;">
                                    <i class="bi bi-@(point["icon"])" style="color: @point["fill"];"></i>
                                </span>
                                <input type="text"
                                       class="text-white border-0 bg-transparent legend-input"
                                       value="@point["name"]"
                                       @onchange="@(e => UpdateName(point, e.Value.ToString()))"
                                       placeholder="Enter name" />
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    }
    else
    {
        <span>Start by editing the map.</span>
    }
</div>

@code {
    [Parameter] public string? Title { get; set; }
    [Parameter] public JArray? Data { get; set; }

    [CascadingParameter] public Action OnNameChanged { get; set; }

    private void UpdateName(JToken legendItem, string newName)
    {
        if (legendItem["name"]?.ToString() != newName)
        {
            legendItem["name"] = newName;
            OnNameChanged?.Invoke();
        }
    }
}
