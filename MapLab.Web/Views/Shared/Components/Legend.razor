@using Newtonsoft.Json.Linq

<div class="legend">
    <h1 class="fw-bold">@Title</h1>
    <div class="d-flex gap-3 align-items-center justify-content-between">
        <div class="d-flex gap-1">
            <span class="badge bg-secondary bg-opacity-25 rounded-pill px-3 py-1">
                <a href="@($"/template/{MapTemplate.Item1}")"
                   class="text-light text-decoration-none">
                    <i class="bi bi-grid me-1"></i>@MapTemplate.Item2
                </a>
            </span>
        </div>
        <div class="d-flex align-items-center">
            <a href="@($"/profile/{Profile.Item2}")"
               class="text-light text-decoration-none d-flex align-items-center">
                <img class="rounded-circle shadow-sm me-1"
                     src="@Profile.Item3"
                     alt="@Profile.Item2"
                     width="16"
                     height="16" />
                <span class="small">@Profile.Item2</span>
            </a>
        </div>
    </div>
    @if (Data != null && Data.Count > 0)
    {
        var regions = Data.Where(d => d["type"].ToString() == "Region").ToList();
        var points = Data.Where(d => d["type"].ToString() == "Point").ToList();

        <div class="row">
            @if (regions.Any())
            {
                <div class="col-md-6">
                    @if (regions.Count < Data.Count)
                    {
                        <h2>Regions</h2>
                    }
                    <ul class="list-unstyled">
                        @foreach (var region in regions)
                        {
                            @if (CanEdit || (!CanEdit && region["name"]?.ToString() != string.Empty))
                            {
                                <li class="d-flex align-items-center mb-2">
                                    <span class="color-switch me-2 d-inline-block" style="background-color: @region["fill"]"></span>
                                    @if (CanEdit)
                                    {
                                        <input type="text"
                                               class="text-white border-0 bg-transparent legend-input"
                                               value="@region["name"]"
                                               @onchange="@(e => UpdateName(region, e.Value.ToString()))"
                                               placeholder="Enter name" />
                                    }
                                    else
                                    {
                                        <span class="text-white border-0 bg-transparent">@region["name"]</span>
                                    }
                                </li>
                            }
                        }
                    </ul>
                </div>
            }

            @if (points.Any())
            {
                <div class="col-md-6">
                    @if (points.Count < Data.Count)
                    {
                        <h2>Points</h2>
                    }
                    <ul class="list-unstyled">
                        @foreach (var point in points)
                        {
                            @if (CanEdit || (!CanEdit && point["name"]?.ToString() != string.Empty))
                            {
                                <li class="d-flex align-items-center mb-2">
                                    <span class="me-2 d-inline-block text-center"
                                          style="width: 30px; height: 30px; display: flex; align-items: center; justify-content: center;">
                                        <i class="bi bi-@(point["icon"])" style="color: @point["fill"];"></i>
                                    </span>
                                    @if (CanEdit)
                                    {
                                        <input type="text"
                                               class="text-white border-0 bg-transparent legend-input"
                                               value="@point["name"]"
                                               @onchange="@(e => UpdateName(point, e.Value.ToString()))"
                                               placeholder="Enter name" />
                                    }
                                    else
                                    {
                                        <span class="text-white border-0 bg-transparent">@point["name"]</span>
                                    }
                                </li>
                            }
                        }
                    </ul>
                </div>
            }
        </div>
    }
    else if (CanEdit)
    {
        <span class="mt-3 d-inline-block">Start by editing the map.</span>
    }
</div>

@code {
    [Parameter] public string? Title { get; set; }
    [Parameter] public (string, string, string) Profile { get; set; }
    [Parameter] public (string, string) MapTemplate { get; set; }
    [Parameter] public JArray? Data { get; set; }
    [Parameter] public bool CanEdit { get; set; }

    [CascadingParameter] public Action OnNameChanged { get; set; }

    private void UpdateName(JToken legendItem, string newName)
    {
        if (legendItem["name"]?.ToString() != newName)
        {
            legendItem["name"] = newName;
            OnNameChanged?.Invoke();
        }
    }
}
