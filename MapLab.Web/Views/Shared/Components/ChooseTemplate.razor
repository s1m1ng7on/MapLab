@using MapLab.Common.Extensions
@using MapLab.Data.Models.Enums
@using MapLab.Shared.Models.FilterModels
@using MapLab.Web.Models.Templates
@using Microsoft.AspNetCore.Components.Forms
@inject MapLab.Services.Contracts.IMapsService _mapService
@inject AutoMapper.IMapper _mapper

<div class="container">
<div class="row">
    <div class="search-bar col-12 col-md-8 position-relative">
        <input type="text" class="form-control rounded-pill h-100" @oninput="OnSearch" placeholder="Search" />
        <span class="position-absolute icon-container">
            <i class="bi bi-search"></i>
        </span>
        @if (!string.IsNullOrEmpty(filters.SearchQuery))
        {
            <button type="button" class="clear-button position-absolute">
                ×
            </button>
        }
    </div>
    <div class="col-6 col-md-4 d-flex gap-3 align-items-center">
        <InputSelect class="form-select rounded-pill h-100" @bind-Value="filters.Region" TValue="Region?">
            <option class="text-muted" value="">Region</option>
            @foreach (var region in Enum.GetValues<Region>())
            {
                <option value="@region">@region.GetDisplayName()</option>
            }
        </InputSelect>
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" @bind-value="filters.ByMapLab" id="byMapLabSwitch">
            <label class="form-check-label" for="byMapLabSwitch">By MapLab</label>
        </div>
    </div>
</div>

@if (string.IsNullOrEmpty(filters.SearchQuery))
{
    var recentMapTemplates = _mapper.Map<List<MapTemplateViewModel>>(_mapService.GetRecentMapTemplates());
    if (recentMapTemplates.Count > 0)
    {
        <h3 class="pt-4 pb-2 fs-4">Recents</h3>
        <div class="container-fluid">
            <div class="card-wrapper row flex-nowrap overflow-auto">
                <ul class="list-unstyled d-flex gap-3 position-relative">
                    @foreach (var template in recentMapTemplates)
                    {
                        <li class="d-inline-block">
                            <div class="position-relative">
                                <TemplateCard MapTemplate="@template"
                                              IsSelected="@(SelectedMapTemplate?.Id == template.Id)"
                                              OnSelected="OnTemplateSelected" />
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>
    }

    <h3 class="pt-4 pb-2 fs-4">By MapLab</h3>
    <div class="container-fluid">
        <div class="card-wrapper row flex-nowrap overflow-auto">
            <ul class="list-unstyled d-flex gap-3 position-relative">
                @foreach (var template in mapLabMapTemplates)
                {
                    <li class="d-inline-block">
                        <div class="position-relative">
                            <TemplateCard MapTemplate="@template"
                                          IsSelected="@(SelectedMapTemplate?.Id == template.Id)"
                                          OnSelected="OnTemplateSelected" />
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>

    <h3 class="pt-4 pb-2 fs-4">Featured</h3>
    <div class="container-fluid">
        <div class="card-wrapper row flex-nowrap overflow-auto">
            <ul class="list-unstyled d-flex gap-3 position-relative">
                @foreach (var template in featuredMapTemplates)
                {
                    <li class="d-inline-block">
                        <div class="position-relative">
                            <TemplateCard MapTemplate="@template"
                                          IsSelected="@(SelectedMapTemplate?.Id == template.Id)"
                                          OnSelected="OnTemplateSelected" />
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>
}
else
{
    <h3 class="pt-4 pb-2 fs-4">Search Results</h3>
    <div class="container-fluid">
        <div class="row">
            @if (templates.Count == 0)
            {
                <div class="col-12 text-center">
                    <i class="bi bi-search" style="font-size: 50px;"></i> <!-- Icon -->
                    <p>No results found. Please try again with different criteria.</p> <!-- Message -->
                </div>
            }
            else
            {
                <ul class="list-unstyled d-flex flex-wrap gap-3">
                    @foreach (var template in templates)
                    {
                        <li class="d-inline-block">
                            <div class="position-relative">
                                <TemplateCard MapTemplate="@template"
                                              IsSelected="@(SelectedMapTemplate?.Id == template.Id)"
                                              OnSelected="OnTemplateSelected" />
                            </div>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
}
</div>

@code {
    private List<MapTemplateViewModel> mapLabMapTemplates = new();
    private List<MapTemplateViewModel> featuredMapTemplates = new();
    private MapTemplateFiltersModel filters = new MapTemplateFiltersModel();
    private List<MapTemplateViewModel> templates = new();

    [Parameter] public MapTemplateViewModel? SelectedMapTemplate { get; set; }

    [Parameter] public EventCallback<MapTemplateViewModel>? SelectedMapTemplateChanged { get; set; }

    protected override void OnInitialized()
    {
        var templateEntities = _mapService.GetMapTemplates();
        templates = _mapper.Map<List<MapTemplateViewModel>>(templateEntities);
        mapLabMapTemplates = _mapper.Map<List<MapTemplateViewModel>>(_mapService.GetMapTemplates(new MapTemplateFiltersModel() { ByMapLab = true }).OrderBy(mt => mt.Region));
        featuredMapTemplates = _mapper.Map<List<MapTemplateViewModel>>(_mapService.GetFeaturedMapTemplates());
    }

    private void OnSearch(ChangeEventArgs e)
    {
        filters.SearchQuery = e.Value?.ToString();
        var templateEntities = _mapService.GetMapTemplates(filters);
        templates = _mapper.Map<List<MapTemplateViewModel>>(templateEntities);
    }

    private async Task OnTemplateSelected(MapTemplateViewModel template)
    {
        await SelectedMapTemplateChanged?.InvokeAsync(template);
    }
}
