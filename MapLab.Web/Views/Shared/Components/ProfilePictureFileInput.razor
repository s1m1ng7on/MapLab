@using MapLab.Data.Managers.Contracts
@inject IJSRuntime JS
@inject IFileStorageManager _fileStorageService
@inject ProfileManager<Profile> _profileManager
@inject IHttpContextAccessor _httpContextAccessor

<InputFile type="file" id="file-input" class="d-none" accept=".jpg,.jpeg,.png" OnChange="OnFileChanged" />
<img src="@ProfilePictureFilePath" class="profile-picture rounded-pill" @onclick="TriggerFileInput" />

<Modal Id="crop-profile-picture-modal"
       OnFinish="OnImageCropped">
    <ModalStep Title="Crop Your Profile Picture">
        <h1>Hello World!</h1>
    </ModalStep>
</Modal>

@code {
    public string? ProfilePictureFilePath { get; set; }
    public IBrowserFile? UploadedFile { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var profile = await _profileManager.GetUserAsync(_httpContextAccessor.HttpContext!.User);
        ProfilePictureFilePath = profile.ProfilePictureFilePath;
    }

    public async Task TriggerFileInput()
    {
        await JS.InvokeVoidAsync("eval", "document.getElementById('file-input').click()");
    }

    public async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        UploadedFile ??= e.File;
        await JS.InvokeVoidAsync("eval", "$('#crop-profile-picture-modal').modal('show')");
    }

    public async Task OnImageCropped()
    {
        if (UploadedFile == null)
            return;

        var profile = await _profileManager.GetUserAsync(_httpContextAccessor.HttpContext!.User);

        ProfilePictureFilePath = await _fileStorageService.SaveFileAsync(UploadedFile, "Profiles", "ProfilePictures", profile!.Id);
        profile.ProfilePictureFilePath = ProfilePictureFilePath;

        await _profileManager.UpdateAsync(profile);
    }
}
