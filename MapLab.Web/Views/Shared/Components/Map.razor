@using MapLab.Services.Contracts
@using MapLab.Web.Models.Maps
@using Newtonsoft.Json.Linq
@inject IMapsService _mapsService
@inject IProfileService _profileService
@inject IJSRuntime _js

<div id="map">
    <div id="map-container">
        <!-- Map will be loaded here -->
    </div>

    @if (CanEdit)
    {
        <Toolbar @bind-SelectedTool="SelectedTool"
                 OnUndo="Undo"
                 OnRedo="Redo" />

        @if (SelectedTool == ToolType.Pinpoint)
        {
            <IconPicker @bind-SelectedIcon="SelectedIcon" />
        }
        @if (SelectedTool == ToolType.Fill)
        {
            <ColorPicker @bind-SelectedColor="FillColor" />
        }
    }

    <Legend Title="@Title"
            Data="@(MapJsonObject?["legend"] as JArray)"
            CanEdit="CanEdit" />

    <Controls CanEdit="CanEdit"
              OnSaveMap="Save" />
</div>

@code {
    private readonly object _lock = new object();

    private TaskCompletionSource<bool> _initializationCompleted = new TaskCompletionSource<bool>();

    [Parameter] public string? Id { get; set; }

    public string? Title { get; set; }

    public string? MapTemplateJson { get; set; }

    public JObject? MapJsonObject { get; set; }

    public bool CanEdit { get; set; }

    private ToolType _selectedTool;
    public ToolType SelectedTool
    {
        get => _selectedTool;
        set
        {
            if (_selectedTool != value)
            {
                _selectedTool = value;
                UpdateSelectedTool();
            }
        }
    }

    private string _fillColor = "#fafafa";
    public string FillColor
    {
        get => _fillColor;
        set
        {
            if (_fillColor != value)
            {
                _fillColor = value;
                UpdateFillColor();
            }
        }
    }

    private string selectedIcon;
    public string? SelectedIcon
    {
        get => selectedIcon;
        set
        {
            if (selectedIcon != value)
            {
                selectedIcon = value;
                UpdateSelectedIcon();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var map = await _mapsService.GetMapAsync(Id);

        (MapTemplateJson, MapJsonObject) = await _mapsService.GetMapJsonAsync(map);
        Title = map.Name;
        CanEdit = map.ProfileId == _profileService.GetProfileId();
        SelectedTool = ToolType.View;

        lock (_lock)
        {
            _initializationCompleted.SetResult(true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _initializationCompleted.Task;

            if (MapTemplateJson != null && MapJsonObject != null)
            {
                await _js.InvokeVoidAsync("mapInterop.loadMap", DotNetObjectReference.Create(this), MapTemplateJson, MapJsonObject.ToString(), CanEdit, SelectedTool.ToString(), FillColor);
            }
        }
    }

    private async Task UpdateSelectedTool()
    {
        await _js.InvokeVoidAsync("mapInterop.updateSelectedTool", SelectedTool.ToString());
    }

    private async Task UpdateFillColor()
    {
        await _js.InvokeVoidAsync("mapInterop.updateFillColor", FillColor);
    }

    [JSInvokable]
    public void Fill(string name, string fill)
    {
        if (MapJsonObject == null) return;

        var legendArray = MapJsonObject["legend"] as JArray;
        var featuresArray = MapJsonObject["features"] as JArray;

        var legendItem = legendArray?
            .FirstOrDefault(l => l["type"]?.ToString() == "Region" && l["fill"]?.ToString() == fill);

        if (legendItem == null && fill != null)
        {
            legendItem = new JObject()
            {
                ["type"] = "Region",
                ["id"] = Guid.NewGuid().ToString(),
                ["name"] = string.Empty,
                ["fill"] = fill
            };

            legendArray.Add(legendItem);
            StateHasChanged();
        }

        var feature = featuresArray?
            .FirstOrDefault(f => f["properties"]?["name"]?.ToString() == name.ToString());

        if (feature != null)
        {
            var featureId = feature["properties"]?["id"]?.ToString();

            if (fill == null)
            {
                featuresArray.Remove(feature);
            }
            else
            {
                feature["properties"]["id"] = legendItem["id"];
            }

            if (!featuresArray?.Any(f => f["properties"]?["id"]?.ToString() == featureId) ?? true)
            {
                legendArray?.Remove(legendArray?.FirstOrDefault(l => l["id"]?.ToString() == featureId));
                StateHasChanged();
            }
        }
        else if (fill != null)
        {
            var newFeature = new JObject()
            {
                ["type"] = "Feature",
                ["properties"] = new JObject
                {
                    ["id"] = legendItem["id"],
                    ["name"] = name
                }
            };

            featuresArray.Add(newFeature);
        }
    }

    [JSInvokable]
    public void Pinpoint(string name, string icon, string fill, double longitude, double latitude)
    {
        if (MapJsonObject == null) return;

        var legendArray = MapJsonObject["legend"] as JArray;
        var featuresArray = MapJsonObject["features"] as JArray;

        var legendItem = legendArray?
            .FirstOrDefault(l => l["type"]?.ToString() == "Point" && l["icon"].ToString() == icon && l["fill"]?.ToString() == fill);

        if (legendItem == null && icon != null && fill != null)
        {
            legendItem = new JObject()
            {
                ["type"] = "Point",
                ["id"] = Guid.NewGuid().ToString(),
                ["name"] = string.Empty,
                ["icon"] = icon,
                ["fill"] = fill
            };

            legendArray.Add(legendItem);
            StateHasChanged();
        }

        if (icon == null && fill == null)
        {
            var feature = featuresArray
                .FirstOrDefault(f =>
                    f["geometry"]?["coordinates"]?[0].ToString() == longitude.ToString() &&
                    f["geometry"]?["coordinates"]?[1].ToString() == latitude.ToString());

            featuresArray.Remove(feature);

            if (!featuresArray?.Any(f => f["properties"]?["id"]?.ToString() == feature["properties"]["id"].ToString()) ?? true)
            {
                legendArray?.Remove(legendArray?.FirstOrDefault(l => l["id"]?.ToString() == feature["properties"]?["id"]?.ToString()));
                StateHasChanged();
            }
        }
        else
        {
            var newFeature = new JObject
                {
                    ["type"] = "Feature",
                    ["properties"] = new JObject
                    {
                        ["id"] = legendItem["id"],
                        ["name"] = name
                    },
                    ["geometry"] = new JObject()
                    {
                        ["type"] = "Point",
                        ["coordinates"] = new JArray(longitude, latitude)
                    }
                };

            featuresArray.Add(newFeature);
        }
    }

    private async Task UpdateSelectedIcon()
    {
        await _js.InvokeVoidAsync("mapInterop.updateSelectedIcon", SelectedIcon);
    }

    private async Task Undo()
    {
        
    }

    private async Task Redo()
    {
        
    }

    [JSInvokable]
    public async Task Save()
    {
        await _mapsService.SaveMapAsync(Id, MapJsonObject.ToString());
    }
}
