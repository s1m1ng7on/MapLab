@using MapLab.Services.Contracts
@using MapLab.Web.Models.Maps
@using Newtonsoft.Json.Linq
@inject IMapsService _mapsService
@inject IProfileService _profileService
@inject IJSRuntime _js

<div id="map-container">
    <!-- Map will be loaded here -->
</div>
@if (CanEdit)
{
    <Toolbar @bind-SelectedTool="SelectedTool"
    OnUndo="Undo"
    OnRedo="Redo"/>
    @if (SelectedTool == ToolType.Pinpoint)
    {
        <IconPicker @bind-SelectedIcon="SelectedIcon" />
    }
    @if (SelectedTool == ToolType.Fill)
    {
        <ColorPicker @bind-SelectedColor="FillColor" />
    }
    <button style="position: absolute; top: 100px; right: 100px;" @onclick="SaveMapJson">Save</button>
}
<Legend Title="@Title"/>

@code {
    private readonly object _lock = new object();

    private TaskCompletionSource<bool> _initializationCompleted = new TaskCompletionSource<bool>();

    [Parameter] public string? Id { get; set; }

    public string? Title { get; set; }

    public string? MapTemplateJson { get; set; }

    public JObject? MapJsonObject { get; set; }

    public bool CanEdit { get; set; }

    private ToolType _selectedTool;
    public ToolType SelectedTool
    {
        get => _selectedTool;
        set
        {
            if (_selectedTool != value)
            {
                _selectedTool = value;
                UpdateSelectedTool();
            }
        }
    }

    private string _fillColor = "#fafafa";
    public string FillColor
    {
        get => _fillColor;
        set
        {
            if (_fillColor != value)
            {
                _fillColor = value;
                UpdateFillColor();
            }
        }
    }

    private string selectedIcon;
    public string? SelectedIcon
    {
        get => selectedIcon;
        set
        {
            if (selectedIcon != value)
            {
                selectedIcon = value;
                UpdateSelectedIcon();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var map = await _mapsService.GetMapAsync(Id);

        (MapTemplateJson, MapJsonObject) = await _mapsService.GetMapJsonAsync(map);
        Title = map.Name;
        CanEdit = map.ProfileId == _profileService.GetProfileId();
        SelectedTool = ToolType.View;

        lock (_lock)
        {
            _initializationCompleted.SetResult(true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Wait for initialization to complete before proceeding
            await _initializationCompleted.Task;

            // Ensure MapTemplateJson and MapJson are set
            if (MapTemplateJson != null && MapJsonObject != null)
            {
                await _js.InvokeVoidAsync("mapInterop.loadMap", DotNetObjectReference.Create(this), MapTemplateJson, MapJsonObject.ToString(), CanEdit, SelectedTool.ToString(), FillColor);
            }
        }
    }

    private async Task UpdateSelectedTool()
    {
        await _js.InvokeVoidAsync("mapInterop.updateSelectedTool", SelectedTool.ToString());
    }

    private async Task UpdateFillColor()
    {
        await _js.InvokeVoidAsync("mapInterop.updateFillColor", FillColor);
    }

    public void Fill(string featureName, string newColor)
    {
        var feature = MapJsonObject["features"]?
            .FirstOrDefault(f => f["properties"]?["name"]?.ToString() == featureName);

        if (feature != null)
        {
            // Update the "fill" property with the new color
            feature["properties"]["fill"] = newColor;
        }
        else
        {
            // If the feature doesn't exist, create a new one and add it
            var newFeature = new JObject
                {
                    ["type"] = "Feature",
                    ["properties"] = new JObject
                    {
                        ["name"] = featureName,
                        ["fill"] = newColor
                    }
                };

            // Use the correct method to add the new feature to the "features" array
            (MapJsonObject["features"] as JArray)?.Add(newFeature);
        }
    }

    [JSInvokable]
    public void HandleFill(string featureName, string newColor)
    {
        Fill(featureName, newColor);
    }

    private async Task UpdateSelectedIcon()
    {
        await _js.InvokeVoidAsync("mapInterop.updateSelectedIcon", SelectedIcon);
    }

    private async Task Undo()
    {
        //await _js.InvokeVoidAsync("mapInterop.undo");
    }

    private async Task Redo()
    {
        //await _js.InvokeVoidAsync("mapInterop.redo");
    }

    public async Task SaveMapJson()
    {
        await _mapsService.SaveMapAsync(Id, MapJsonObject.ToString());
    }
}
