@inject IJSRuntime JS

@code {
    private List<ModalStep> steps = new();

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public string? Id { get; set; }

    public int CurrentStep { get; private set; } = 0;

    public string? Title { get; set; }

    public int RegisterStep(ModalStep step)
    {
        steps.Add(step);
        return steps.Count - 1;
    }

    private void NextStep()
    {
        if (CurrentStep < steps.Count - 1)
            CurrentStep++;
    }

    private void PrevStep()
    {
        if (CurrentStep > 0)
            CurrentStep--;
    }
}

<div class="modal fade" id="@Id" tabindex="-1" aria-labelledby="modalTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <CascadingValue Value="this">
                    @ChildContent
                </CascadingValue>
            </div>
            <div class="modal-footer justify-content-center">
                @if (CurrentStep == 0)
                {
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                }
                else
                {
                    <button type="button" class="btn btn-secondary" @onclick="PrevStep">Back</button>
                }

                @if (CurrentStep == steps.Count - 1)
                {
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Finish</button>
                }
                else
                {
                    <button type="button" class="btn btn-primary" @onclick="NextStep">Next</button>
                }
            </div>
        </div>
    </div>
</div>
